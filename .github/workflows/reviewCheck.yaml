name: review check bot

on:
  workflow_dispatch:
  pull_request:
    types: [opened, reopened, synchronize, ready_for_review]

env:
  TZ: "Asia/Tokyo"

jobs:

# test is ready?
  readyForTestChecker:
    runs-on: ubuntu-latest
    if: ${{!(github.event.pull_request.draft == true && contains(github.event.pull_request.labels.*.name, 'stop_ci'))}}
    steps:
      - run: echo this pull request is ready for review by team1

# BOT is reviewed ? or review required
  botReviewedChecker:
    needs: readyForTestChecker
    if: ${{ !contains(github.event.pull_request.labels.*.name, 'BotReviewed') }}
    runs-on: ubuntu-latest
    steps:
      - run: echo bot is stated review.

# check diff first. and add label
  labeler:
      permissions:
        contents: read
        pull-requests: write
      runs-on: ubuntu-latest
      needs: botReviewedChecker
      steps:
        - uses: actions/labeler@v4
          with:
            repo-token: "${{ secrets.GITHUB_TOKEN }}"
            configuration-path: ".github/config/labeler.yaml"
            sync-labels: true

# lint checker
  eslint:
    needs: botReviewedChecker
    name: ESLint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: technote-space/get-diff-action@v6
        with:
          PATTERNS: |
            +(src|__tests__)/**/*.(ts|tsx)
          FILES: |
            yarn.lock
            .eslintrc
      # キャッシュとかは後回し
      - name: echo diff files
        run: | 
          - echo ${{ env.GIT_DIFF }}
      - name: Install Package dependencies
        working-directory: sandbox
        run: yarn install
        if: env.GIT_DIFF
      - name: Check code style
        working-directory: sandbox
        # Check only source files with differences
        run: yarn lint ${{ env.GIT_DIFF_FILTERED }}
        if: env.GIT_DIFF && !env.MATCHED_FILES

#   output result
  commentResult:
    runs-on: ubuntu-latest
    needs: 
      - labeler
      - eslint
    permissions:
      contents: read
      pull-requests: write
    steps:
      - uses: actions/github-script@v6
        with:
          script: |
            // Get the existing comments.
            const {data: comments} = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.payload.number,
            });
            
            const botComment = comments.find(comment => comment.user.id === 41898282);                                                                  
            const commentBody = `👋 check is done `
            
            if (botComment) {
                await github.rest.issues.updateComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  comment_id: botComment.id,
                  body: commentBody
                })
               github.rest.issues.addLabels({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                labels: ['BotReviewed']
              })
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.payload.number,
                body:  commentBody
              })
            }
